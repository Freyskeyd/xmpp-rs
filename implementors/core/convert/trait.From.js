(function() {var implementors = {};
implementors["xmpp_proto"] = [{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"xmpp_proto/struct.Auth.html\" title=\"struct xmpp_proto::Auth\">Auth</a>&gt; for <a class=\"enum\" href=\"xmpp_proto/enum.Packet.html\" title=\"enum xmpp_proto::Packet\">Packet</a>","synthetic":false,"types":["xmpp_proto::Packet"]},{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"xmpp_proto/struct.OpenStream.html\" title=\"struct xmpp_proto::OpenStream\">OpenStream</a>&gt; for <a class=\"enum\" href=\"xmpp_proto/enum.Packet.html\" title=\"enum xmpp_proto::Packet\">Packet</a>","synthetic":false,"types":["xmpp_proto::Packet"]},{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"xmpp_proto/struct.ProceedTls.html\" title=\"struct xmpp_proto::ProceedTls\">ProceedTls</a>&gt; for <a class=\"enum\" href=\"xmpp_proto/enum.Packet.html\" title=\"enum xmpp_proto::Packet\">Packet</a>","synthetic":false,"types":["xmpp_proto::Packet"]},{"text":"impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;T&gt; for <a class=\"enum\" href=\"xmpp_proto/enum.Packet.html\" title=\"enum xmpp_proto::Packet\">Packet</a> <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: <a class=\"trait\" href=\"xmpp_proto/trait.NonStanzaTrait.html\" title=\"trait xmpp_proto::NonStanzaTrait\">NonStanzaTrait</a>,&nbsp;</span>","synthetic":false,"types":["xmpp_proto::Packet"]},{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"enum\" href=\"xmpp_proto/enum.NonStanza.html\" title=\"enum xmpp_proto::NonStanza\">NonStanza</a>&gt; for <a class=\"enum\" href=\"xmpp_proto/enum.Packet.html\" title=\"enum xmpp_proto::Packet\">Packet</a>","synthetic":false,"types":["xmpp_proto::Packet"]},{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"enum\" href=\"xmpp_proto/enum.Stanza.html\" title=\"enum xmpp_proto::Stanza\">Stanza</a>&gt; for <a class=\"enum\" href=\"xmpp_proto/enum.Packet.html\" title=\"enum xmpp_proto::Packet\">Packet</a>","synthetic":false,"types":["xmpp_proto::Packet"]},{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"xmpp_proto/struct.StreamFeatures.html\" title=\"struct xmpp_proto::StreamFeatures\">StreamFeatures</a>&gt; for <a class=\"enum\" href=\"xmpp_proto/enum.Packet.html\" title=\"enum xmpp_proto::Packet\">Packet</a>","synthetic":false,"types":["xmpp_proto::Packet"]},{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"xmpp_proto/struct.StartTls.html\" title=\"struct xmpp_proto::StartTls\">StartTls</a>&gt; for <a class=\"enum\" href=\"xmpp_proto/enum.Packet.html\" title=\"enum xmpp_proto::Packet\">Packet</a>","synthetic":false,"types":["xmpp_proto::Packet"]},{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"xmpp_proto/struct.GenericIq.html\" title=\"struct xmpp_proto::GenericIq\">GenericIq</a>&gt; for <a class=\"enum\" href=\"xmpp_proto/enum.Packet.html\" title=\"enum xmpp_proto::Packet\">Packet</a>","synthetic":false,"types":["xmpp_proto::Packet"]}];
implementors["xmpp_xml"] = [{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;Error&gt; for <a class=\"enum\" href=\"xmpp_xml/enum.Error.html\" title=\"enum xmpp_xml::Error\">Error</a>","synthetic":false,"types":["xmpp_xml::error::Error"]},{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;EmitterError&gt; for <a class=\"enum\" href=\"xmpp_xml/enum.Error.html\" title=\"enum xmpp_xml::Error\">Error</a>","synthetic":false,"types":["xmpp_xml::error::Error"]},{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"enum\" href=\"xmpp_xml/enum.Error.html\" title=\"enum xmpp_xml::Error\">Error</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>","synthetic":false,"types":["std::io::error::Error"]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()