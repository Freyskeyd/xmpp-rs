var searchIndex = JSON.parse('{\
"server":{"doc":"","t":[5],"n":["main"],"q":["server"],"d":[""],"i":[0],"f":[[[]]],"p":[]},\
"xmpp":{"doc":"xmpp-rs is an implementation of the Extensible Messaging …","t":[],"n":[],"q":[],"d":[],"i":[],"f":[],"p":[]},\
"xmpp_credentials":{"doc":"","t":[3,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Credentials","jid","password","format","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","clone","default","eq","ne","fmt"],"q":["xmpp_credentials","","","","","","","","","","","","","","","","",""],"d":["Define Credentials used to authenticate a user","","","","","","","","","","","","","","","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[null,null,null,[[],["saslcredentials",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["credentials",3]],[[],["credentials",3]],[[["credentials",3]],["bool",15]],[[["credentials",3]],["bool",15]],[[["formatter",3]],["result",6]]],"p":[[3,"Credentials"]]},\
"xmpp_proto":{"doc":"","t":[0,17,17,17,17,17,17,17,17,17,17,3,3,12,12,12,12,12,3,3,4,13,13,8,11,11,4,13,13,13,4,13,13,13,13,13,13,8,16,10,8,16,10,4,13,13,13,13,3,12,3,3,4,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["ns","XML_URI","CLIENT","SERVER","STREAM","TLS","SASL","BIND","SESSION","STANZAS","PING","Auth","OpenStream","id","lang","version","to","from","OpenStreamBuilder","ProceedTls","Packet","NonStanza","Stanza","NonStanzaTrait","write_to_stream","parse","Stanza","IQ","Message","Presence","NonStanza","OpenStream","ProceedTls","StartTls","SASLSuccess","StreamFeatures","Auth","FromXmlElement","Error","from_element","ToXmlElement","Error","to_element","Features","StartTlsInit","Bind","Mechanisms","Unknown","StreamFeatures","features","StartTls","GenericIq","IqType","Get","Set","Result","Error","new","unique_id","get_element","set_type","get_type","get_id","set_id","set_to","get_to","set_from","get_from","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from_element","from_element","from_element","to_element","to_element","to_element","to_element","to_element","to_element","from","from","from","from","from","from","from","from","from","into","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","default","default","default","default","eq","ne","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from_str","id","lang","version","to","from","build"],"q":["xmpp_proto","xmpp_proto::ns","","","","","","","","","","xmpp_protod":["","","","","","","","","","","","","Define an OpenStream NonStanza packet.","An Id generated by the server. The ‘id’ attribute …","The ‘xml:lang’ attribute specifies an entity’s …","The inclusion of the version attribute set to a value of …","","","Builder for <code>OpenStream</code>.","","","Represent a packet which is an XML Stream","Represent a packet which isn’t an XML Stanza","","","","Define a sub part of a Packet, a Stanza is the …","","","","Define a sub part of a Packet, a NonStanza is the …","","","","","","","FromXmlElement is used to transform an Element to an …n Id generated by the server. The ‘id’ attribute …","The ‘xml:lang’ attribute specifies an entity’s …","The inclusion of the version attribute set to a value of …","","","Builds a new <code>OpenStream</code>."],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,2,2,0,2,2,0,3,3,3,0,4,4,4,4,4,4,0,5,5,0,6,6,0,7,7,7,7,0,8,0,0,0,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,1,1,1,1,1,1,1,1,1,12,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,13,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,14,14,14,14,14,14,14,14,14,10,10,10,10,10,10,10,10,10,9,9,9,9,9,9,9,9,9,9,11,13,10,1,13,3,4,8,10,2,2,2,2,2,2,2,2,2,9,11,12,1,13,2,3,4,7,8,14,10,9,11,12,13,10,7,7,9,11,1,13,2,3,4,7,8,14,10,9,9,9,12,12,12,12,12,12],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["write",8]],[["result",4],["error",3]]],[[["ownedattribute",3],["vec",3],["namespace",3],["eventreader",3],["ownedname",3]],["option",4]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[["element",3]],["result",4]],null,null,[[],[["element",3],["result",4]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["iqtype",4]],["genericiq",3]],[[],["string",3]],[[],[["element",3],["option",4]]],[[["iqtype",4]]],[[],["iqtype",4]],[[],["str",15]],[[]],[[["jid",4],["option",4]]],[[],[["jid",4],["option",4]]],[[["jid",4],["option",4]]],[[],[["jid",4],["option",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["element",3]],["result",4]],[[["element",3]],["result",4]],[[["element",3]],[["result",4],["error",3]]],[[],[["element",3],["result",4]]],[[],[["element",3],["error",3],["result",4]]],[[],[["element",3],["result",4]]],[[],[["element",3],["result",4]]],[[],[["element",3],["error",3],["result",4]]],[[],[["element",3],["result",4]]],[[["auth",3]]],[[["openstream",3]]],[[["proceedtls",3]]],[[]],[[["nonstanza",4]]],[[["stanza",4]]],[[["streamfeatures",3]]],[[["starttls",3]]],[[["genericiq",3]]],[[],["string",3]],[[],["auth",3]],[[],["openstreambuilder",3]],[[],["openstream",3]],[[],["proceedtls",3]],[[],["packet",4]],[[],["stanza",4]],[[],["nonstanza",4]],[[],["features",4]],[[],["streamfeatures",3]],[[],["starttls",3]],[[],["genericiq",3]],[[],["iqtype",4]],[[],["auth",3]],[[],["openstreambuilder",3]],[[],["proceedtls",3]],[[]],[[["features",4]],["bool",15]],[[["features",4]],["bool",15]],[[["iqtype",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["str",15]],["result",4]],[[["uuid",3],["into",8]]],[[["into",8],["string",3]]],[[["into",8],["string",3]]],[[["into",8],["string",3]]],[[["into",8],["string",3]]],[[],[["string",3],["result",4],["openstream",3]]]],"p":[[3,"OpenStream"],[4,"Packet"],[4,"Stanza"],[4,"NonStanza"],[8,"FromXmlElement"],[8,"ToXmlElement"],[4,"Features"],[3,"StreamFeatures"],[4,"IqType"],[3,"GenericIq"],[3,"Auth"],[3,"OpenStreamBuilder"],[3,"ProceedTls"],[3,"StartTls"]]},\
"xmpp_server":{"doc":"","t":[3,11,3,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Server","build","ServerBuilder","cert","keys","launch","Session","SessionManager","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","default","default","started"],"q":["xmpp_server","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,1,0,2,2,2,0,0,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,2,4,4],"f":[null,[[],["serverbuilder",3]],null,[[["string",3],["into",8]]],[[["string",3],["into",8]]],[[]],null,null,[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["serverbuilder",3]],[[],["sessionmanager",3]],[[]]],"p":[[3,"Server"],[3,"ServerBuilder"],[3,"Session"],[3,"SessionManager"]]},\
"xmpp_xml":{"doc":"","t":[3,3,3,3,3,3,4,13,12,12,13,13,13,12,12,13,3,4,13,13,3,3,3,8,10,4,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Children","ChildrenMut","Attrs","FindChildren","FindChildrenMut","Element","Error","MalformedXml","msg","pos","Io","Utf8","UnexpectedEvent","msg","pos","DuplicateNamespacePrefix","NamespaceMap","XmlProlog","Version10","Version11","WriteOptions","Position","QName","AsQName","as_qname","XmlAtom","Shared","Borrowed","from","into","into_iter","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","from","next","next","next","next","next","clone","clone","clone","clone","clone","default","cmp","cmp","cmp","eq","ne","eq","eq","partial_cmp","partial_cmp","partial_cmp","deref","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","hash","description","cause","new","new_with_namespaces","from_reader","to_writer","to_writer_with_options","to_string","from_xml_start_element","from_start_element","text","set_text","write_end_tag","tail","set_tail","tag","set_tag","child_count","get_child","get_child_mut","remove_child","append_child","append_new_child","children","children_mut","find_all","find_all_mut","find","find_mut","get_attr","set_attr","remove_attr","attrs","attr_count","register_namespace","set_namespace_prefix","get_namespace_prefix","navigate","position","line","column","new","get_prefix","set_prefix","register_if_missing","new","set_xml_prolog","set_write_end_tag","new","line","column","from","from_name","from_ns_name","name","ns","share","borrow"],"q":["xmpp_xml","","","","","","","","xmpp_xml::Error","","xmpp_xml","","","xmpp_xml::Error","","xmpp_xmld":["An iterator over children of an element.","A mutable iterator over children of an element.","An iterator over attributes of an element.","An iterator over matching children.","A mutable iterator over matching children.","Represents an XML element.","Errors that can occur parsing XML","The XML is invalid","","","An IO Error","A UTF-8 Error","This library is unable to process this XML. This can …","","","A namespace prefix was already used","","Xml Prolog version handle by xmpp_xml","","","A struct that define write options.","Represents a position in the source.","A <code>QName</code> represents a qualified name.","Convenience trait to get a <code>QName</code> from an object.","Returns a Cow’ed <code>QName</code> from the given object.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new element without any children but a given …","Creates a new element without any children but inheriting …","Parses some XML data into an <code>Element</code> from a reader.","Dump an element as XML document into a writer.","Dump an element as XML document into a writer with option.","Dump an element as XML document into a string","","","Returns the text of a tag.","Sets a new text value for the tag.","","Returns the tail text of a tag.","Sets a new tail text value for the tag.","The tag of the element as qualified name.","Sets a new tag for the element.","Returns the number of children","Returns the nth child.","Returns the nth child as a mutable reference.","Removes a child.","Appends a new child and returns a reference to self.","Appends a new child to the element and returns a …","Returns an iterator over all children.","Returns a mutable iterator over all children.","Returns all children with the given name.","Returns all children with the given name.","Finds the first matching child","Finds the first matching child and returns a mut ref","Look up an attribute by qualified name.","Sets a new attribute.","Removes an attribute and returns the stored string.","Returns an iterator over all attributes","Count the attributes","Registers a namespace with the internal namespace map.","Sets a specific namespace prefix.  This will also …","Returns the assigned prefix for a namespace.","Finds the first element that match a given path downwards","Returns the position of the error if known","Returns the line number of the error or 0 if unknown","Returns the column of the error or 0 if unknown","","","","","","Define which xml prolog will be displayed when rendering …","Define if we write the end tag of an element.","Creates a new position.","Returns the line number of the position","Returns the column of the position","Creates a qualified name from a given string.","Creates a qualified name from a given string without …","Creates a qualified name from a namespace and name.","Returns the name portion of the qualified name.  This is …","Returns the optional namespace of this element.  This is …","Creates a shared <code>QName</code> with static lifetime from an …",""],"i":[0,0,0,0,0,0,0,1,2,2,1,1,1,3,3,1,0,0,4,4,0,0,0,0,5,0,6,6,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,1,1,1,1,1,1,1,1,13,13,13,13,13,13,13,13,13,4,4,4,4,4,4,4,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,15,15,16,16,16,16,16,16,16,16,16,16,6,6,6,6,6,6,6,6,6,1,1,7,8,10,11,9,12,13,15,16,6,14,15,16,6,15,15,16,6,15,16,6,6,12,1,13,15,16,6,1,15,16,16,1,1,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,1,1,1,13,13,13,13,14,14,14,15,15,15,16,16,16,16,16,16,6],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],[["cow",4],["qname",3]]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["xmlreaderror",3]],["error",4]],[[["xmlwriteerror",4]],["error",4]],[[],[["element",3],["option",4]]],[[],[["option",4],["element",3]]],[[],[["element",3],["option",4]]],[[],[["option",4],["element",3]]],[[],["option",4]],[[],["element",3]],[[],["namespacemap",3]],[[],["position",3]],[[],["qname",3]],[[],["xmlatom",4]],[[],["writeoptions",3]],[[["position",3]],["ordering",4]],[[["qname",3]],["ordering",4]],[[["xmlatom",4]],["ordering",4]],[[["position",3]],["bool",15]],[[["position",3]],["bool",15]],[[["qname",3]],["bool",15]],[[["xmlatom",4]],["bool",15]],[[["position",3]],[["ordering",4],["option",4]]],[[["qname",3]],[["option",4],["ordering",4]]],[[["xmlatom",4]],[["option",4],["ordering",4]]],[[],["str",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[],["str",15]],[[],[["option",4],["error",8]]],[[["asqname",8]],["element",3]],[[["asqname",8],["element",3]],["element",3]],[[["read",8]],[["result",4],["element",3],["error",4]]],[[["write",8]],[["result",4],["error",4]]],[[["write",8],["writeoptions",3]],[["result",4],["error",4]]],[[],[["result",4],["string",3],["error",4]]],[[["eventreader",3],["xmlevent",4]],[["error",4],["result",4]]],[[["xmlnamespacemap",3],["option",4],["ownedname",3],["arc",3],["ownedattribute",3],["eventreader",3],["vec",3]],[["result",4],["element",3],["error",4]]],[[],["str",15]],[[["string",3],["into",8]],["element",3]],[[["bool",15]]],[[],["str",15]],[[["string",3],["into",8]],["element",3]],[[],["qname",3]],[[["qname",3]],["element",3]],[[],["usize",15]],[[["usize",15]],[["option",4],["element",3]]],[[["usize",15]],[["element",3],["option",4]]],[[["usize",15]],[["element",3],["option",4]]],[[["element",3]],["element",3]],[[["asqname",8]],["element",3]],[[],["children",3]],[[],["childrenmut",3]],[[["asqname",8]],["findchildren",3]],[[["asqname",8]],["findchildrenmut",3]],[[["asqname",8]],[["element",3],["option",4]]],[[["asqname",8]],[["option",4],["element",3]]],[[["asqname",8]],[["str",15],["option",4]]],[[["string",3],["asqname",8],["into",8]],["element",3]],[[["asqname",8]],[["string",3],["option",4]]],[[],["attrs",3]],[[],["usize",15]],[[["option",4],["str",15]]],[[["str",15]],[["result",4],["error",4]]],[[["str",15]],[["option",4],["str",15]]],[[],[["element",3],["option",4]]],[[],[["option",4],["position",3]]],[[],["u64",15]],[[],["u64",15]],[[],["namespacemap",3]],[[["str",15]],[["option",4],["str",15]]],[[["str",15]],[["result",4],["error",4]]],[[["option",4],["str",15]],["bool",15]],[[],["writeoptions",3]],[[["option",4],["xmlprolog",4]]],[[["bool",15]]],[[["u64",15]],["position",3]],[[],["u64",15]],[[],["u64",15]],[[["str",15]],["qname",3]],[[["str",15]],["qname",3]],[[["str",15],["option",4]],["qname",3]],[[],["str",15]],[[],[["option",4],["str",15]]],[[],["qname",3]],[[],["str",15]]],"p":[[4,"Error"],[13,"MalformedXml"],[13,"UnexpectedEvent"],[4,"XmlProlog"],[8,"AsQName"],[4,"XmlAtom"],[3,"Children"],[3,"ChildrenMut"],[3,"Attrs"],[3,"FindChildren"],[3,"FindChildrenMut"],[3,"Element"],[3,"NamespaceMap"],[3,"WriteOptions"],[3,"Position"],[3,"QName"]]}\
}');
initSearch(searchIndex);